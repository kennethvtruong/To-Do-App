{"version":3,"sources":["components/Task.js","components/TaskForm.js","App.js","reportWebVitals.js","index.js"],"names":["Task","tasks","index","completeTask","removeTask","className","style","textDecoration","isCompleted","text","onClick","TaskForm","addTask","React","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","setTasks","newTasks","splice","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAgBgBA,MAdhB,YAA2D,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACxC,OACE,sBACEC,UAAU,QACVC,MAAO,CAAEC,eAAgBN,EAAMO,YAAc,eAAgB,IAF/D,UAGKP,EAAMQ,KACP,gCACE,wBAAQC,QAAS,kBAAMP,EAAaD,IAApC,sBACA,wBAAQQ,QAAS,kBAAMN,EAAWF,IAAlC,2BCcKS,MAtBjB,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACDC,IAAMC,SAAS,IADd,mBACpBC,EADoB,KACbC,EADa,KAU3B,OACE,sBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,IACJH,EAAQG,GACRC,EAAS,MAIT,SACE,uBACEI,KAAK,OACLf,UAAU,QACVU,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,aC8B5BQ,MA1Cf,WAAgB,IAAD,EACaV,IAAMC,SAAS,CACvC,CAACL,KAAM,mBACPD,aAAa,KAHF,mBACNP,EADM,KACCuB,EADD,KAYPrB,EAAe,SAAAD,GACnB,IAAMuB,EAAQ,YAAOxB,GACrBwB,EAASvB,GAAOM,aAAc,EAC9BgB,EAASC,IAGLrB,EAAa,SAAAF,GACjB,IAAMuB,EAAQ,YAAOxB,GACrBwB,EAASC,OAAOxB,EAAO,GACvBsB,EAASC,IAGX,OACE,qBAAKpB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACGJ,EAAM0B,KAAI,SAAC1B,EAAOC,GAAR,OACT,cAAC,EAAD,CAEEA,MAAOA,EACPD,MAAOA,EACPE,aAAcA,EACdC,WAAYA,GAJPF,MAOT,cAAC,EAAD,CAAUU,QA7BA,SAAAH,GACd,IAAMgB,EAAQ,sBAAOxB,GAAP,CAAc,CAAEQ,UAC9Be,EAASC,YCHEG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.91cdd680.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Task({ tasks, index, completeTask, removeTask }) {\r\n    return (\r\n      <div \r\n        className=\"tasks\"\r\n        style={{ textDecoration: tasks.isCompleted ? \"line-through\": \"\"}}>\r\n          {tasks.text} \r\n          <div>\r\n            <button onClick={() => completeTask(index)}>Complete</button>\r\n            <button onClick={() => removeTask(index)}>Delete</button>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n export default Task;","import React from 'react';\r\n\r\nfunction TaskForm({ addTask }) {\r\n    const [value, setValue] = React.useState(\"\");\r\n  \r\n    const handleSubmit = e => {\r\n      e.preventDefault();\r\n      if(!value) return;\r\n      addTask(value);\r\n      setValue(\"\")\r\n    };\r\n  \r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n          />\r\n      </form>\r\n    )\r\n  }\r\n\r\n  export default TaskForm;","import './App.css';\nimport React from 'react';\nimport Task from './components/Task.js'\nimport TaskForm from './components/TaskForm.js'\n\n\nfunction App() {\n  const [tasks, setTasks] = React.useState([\n    {text: \"Start To-Do List\",\n    isCompleted: false}\n\n  ]);\n\n  const addTask = text => {\n    const newTasks = [...tasks, { text }];\n    setTasks(newTasks);\n  };\n\n  const completeTask = index => {\n    const newTasks = [...tasks];\n    newTasks[index].isCompleted = true;\n    setTasks(newTasks)\n  };\n\n  const removeTask = index => {\n    const newTasks = [...tasks];\n    newTasks.splice(index, 1);\n    setTasks(newTasks)\n  }; \n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {tasks.map((tasks, index) => (\n          <Task \n            key={index}\n            index={index}\n            tasks={tasks}\n            completeTask={completeTask}\n            removeTask={removeTask}\n            />\n        ))}\n        <TaskForm addTask={addTask} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}