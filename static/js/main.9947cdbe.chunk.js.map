{"version":3,"sources":["components/Todo.js","components/TodoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","toDo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","TodoForm","addToDo","React","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","setToDos","newTodos","splice","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAEO,SAASA,EAAT,GAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WAC9C,OACE,sBACEC,UAAU,OACVC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAgB,IAF9D,UAGKP,EAAKQ,KACN,gCACE,wBAAQC,QAAS,kBAAMP,EAAaD,IAApC,sBACA,wBAAQQ,QAAS,kBAAMN,EAAWF,IAAlC,0BCRL,SAASS,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EACRC,IAAMC,SAAS,IADP,mBAC3BC,EAD2B,KACpBC,EADoB,KAUlC,OACE,sBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,IACJH,EAAQG,GACRC,EAAS,MAIT,SACE,uBACEI,KAAK,OACLf,UAAU,QACVU,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,YC8B5BQ,MA1Cf,WAAgB,IAAD,EACYV,IAAMC,SAAS,CACtC,CAACL,KAAM,mBACPD,aAAa,KAHF,mBACNP,EADM,KACAuB,EADA,KAYPrB,EAAgB,SAAAD,GACpB,IAAMuB,EAAQ,YAAOxB,GACrBwB,EAASvB,GAAOM,aAAc,EAC9BgB,EAASC,IAGLrB,EAAa,SAAAF,GACjB,IAAMuB,EAAQ,YAAOxB,GACrBwB,EAASC,OAAOxB,EAAO,GACvBsB,EAASC,IAGX,OACE,qBAAKpB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACGJ,EAAK0B,KAAI,SAAC1B,EAAMC,GAAP,OACR,cAACF,EAAD,CAEEE,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,GAJPF,MAOT,cAACS,EAAD,CAAUC,QA7BA,SAAAH,GACd,IAAMgB,EAAQ,sBAAOxB,GAAP,CAAa,CAAEQ,UAC7Be,EAASC,YCHEG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9947cdbe.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport function Todo({ toDo, index, completeTodo, removeTodo }) {\r\n    return (\r\n      <div \r\n        className=\"toDo\"\r\n        style={{ textDecoration: toDo.isCompleted ? \"line-through\": \"\"}}>\r\n          {toDo.text} \r\n          <div>\r\n            <button onClick={() => completeTodo(index)}>Complete</button>\r\n            <button onClick={() => removeTodo(index)}>Delete</button>\r\n          </div>\r\n        </div>\r\n    )\r\n  }","import React from 'react';\r\n\r\nexport function TodoForm({ addToDo }) {\r\n    const [value, setValue] = React.useState(\"\");\r\n  \r\n    const handleSubmit = e => {\r\n      e.preventDefault();\r\n      if(!value) return;\r\n      addToDo(value);\r\n      setValue(\"\")\r\n    };\r\n  \r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n          />\r\n      </form>\r\n    )\r\n  }","import './App.css';\nimport React from 'react';\nimport { Todo } from './components/Todo.js'\nimport { TodoForm } from './components/TodoForm.js'\n\n\nfunction App() {\n  const [toDo, setToDos] = React.useState([\n    {text: \"Start To-Do List\",\n    isCompleted: false}\n\n  ]);\n\n  const addToDo = text => {\n    const newTodos = [...toDo, { text }];\n    setToDos(newTodos);\n  };\n\n  const completeTodo =  index => {\n    const newTodos = [...toDo];\n    newTodos[index].isCompleted = true;\n    setToDos(newTodos)\n  };\n\n  const removeTodo = index => {\n    const newTodos = [...toDo];\n    newTodos.splice(index, 1);\n    setToDos(newTodos)\n  }; \n\n  return (\n    <div className=\"app\">\n      <div className=\"toDo-list\">\n        {toDo.map((toDo, index) => (\n          <Todo \n            key={index}\n            index={index}\n            toDo={toDo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n            />\n        ))}\n        <TodoForm addToDo={addToDo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}