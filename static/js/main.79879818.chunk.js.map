{"version":3,"sources":["components/Task.js","components/TaskForm.js","App.js","reportWebVitals.js","index.js"],"names":["Task","tasks","index","completeTask","removeTask","count","setCount","className","style","textDecoration","isCompleted","text","onClick","disabled","TaskForm","addTask","setDisabled","React","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","setTasks","Date","date","newTasks","splice","toLocaleDateString","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAqBgBA,MAnBhB,YAA2E,IAA3DC,EAA0D,EAA1DA,MAAOC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAK3D,OACE,sBACEC,UAAU,QACVC,MAAO,CAAEC,eAAgBR,EAAMS,YAAc,eAAgB,IAF/D,UAGKT,EAAMU,KACP,gCACE,wBAAQC,QAVI,WAClBT,EAAaD,GACbI,EAASD,EAAM,IASDQ,SAAUZ,EAAMS,YADxB,sBAEA,wBAAQE,QAAS,kBAAMR,EAAWF,IAAlC,2BCSKY,MAtBjB,YAAuD,IAAnCC,EAAkC,EAAlCA,QAAkC,KAAzBF,SAAyB,EAAfG,YACTC,IAAMC,SAAS,KADS,mBAC3CC,EAD2C,KACpCC,EADoC,KAUlD,OACE,sBAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACEJ,IACJJ,EAAQI,GACRC,EAAS,MAIT,SACE,uBACEI,KAAK,OACLjB,UAAU,QACVY,MAAOA,EACPM,SAAU,SAAAH,GAAC,OAAIF,EAASE,EAAEI,OAAOP,aCuC5BQ,MApDf,WAAgB,IAAD,EACaV,IAAMC,SAAS,CACvC,CAACP,KAAM,mBACPD,aAAa,KAHF,mBACNT,EADM,KACC2B,EADD,OAOaX,IAAMC,SAAS,GAP5B,mBAONb,EAPM,KAOCC,EAPD,OASWW,IAAMC,SAAS,IAAIW,MAT9B,mBASNC,EATM,KAgBP3B,GAhBO,KAgBQ,SAAAD,GACnB,IAAM6B,EAAQ,YAAO9B,GACrB8B,EAAS7B,GAAOQ,aAAc,EAC9BkB,EAASG,KAGL3B,EAAa,SAAAF,GACjB,IAAM6B,EAAQ,YAAO9B,GACrB8B,EAASC,OAAO9B,EAAO,GACvB0B,EAASG,IAGX,OACE,sBAAKxB,UAAU,MAAf,UACE,6BAAKuB,EAAKG,uBACV,mDAAsB5B,KACtB,sBAAKE,UAAU,YAAf,UACGN,EAAMiC,KAAI,SAACjC,EAAOC,GAAR,OACT,cAAC,EAAD,CAEEA,MAAOA,EACPD,MAAOA,EACPE,aAAcA,EACdC,WAAYA,EACZC,MAAOA,EACPC,SAAUA,GANLJ,MAST,cAAC,EAAD,CACEa,QAlCQ,SAAAJ,GACd,IAAMoB,EAAQ,sBAAO9B,GAAP,CAAc,CAAEU,UAC9BiB,EAASG,aCNEI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.79879818.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Task({ tasks, index, completeTask, removeTask, count, setCount}) {\r\n    const handleClick = () => {\r\n      completeTask(index);\r\n      setCount(count+1);\r\n    }\r\n    return (\r\n      <div \r\n        className=\"tasks\"\r\n        style={{ textDecoration: tasks.isCompleted ? \"line-through\": \"\"}}>\r\n          {tasks.text} \r\n          <div>\r\n            <button onClick={handleClick} \r\n                    disabled={tasks.isCompleted}>Complete</button>\r\n            <button onClick={() => removeTask(index)}>Delete</button>\r\n          </div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n export default Task;","import React from 'react';\r\n\r\nfunction TaskForm({ addTask, disabled, setDisabled }) {\r\n    const [value, setValue] = React.useState(\"\");\r\n  \r\n    const handleSubmit = e => {\r\n      e.preventDefault();\r\n      if(!value) return;\r\n      addTask(value);\r\n      setValue(\"\")\r\n    };\r\n  \r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"input\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n          />\r\n      </form>\r\n    )\r\n  }\r\n\r\n  export default TaskForm;","import './App.css';\nimport React from 'react';\nimport Task from './components/Task.js'\nimport TaskForm from './components/TaskForm.js'\n\nfunction App() {\n  const [tasks, setTasks] = React.useState([\n    {text: \"Start To-Do List\",\n    isCompleted: false,\n    }\n  ]);\n\n  const [count, setCount] = React.useState(0)\n\n  const [date, setDate] = React.useState(new Date());\n\n  const addTask = text => {\n    const newTasks = [...tasks, { text }];\n    setTasks(newTasks);\n  };\n\n  const completeTask = index => {\n    const newTasks = [...tasks];\n    newTasks[index].isCompleted = true;\n    setTasks(newTasks)\n  };\n\n  const removeTask = index => {\n    const newTasks = [...tasks];\n    newTasks.splice(index, 1);\n    setTasks(newTasks)\n  }; \n\n  return (\n    <div className=\"app\">\n      <h2>{date.toLocaleDateString()}</h2>\n      <h2>Tasks Completed: {count}</h2>\n      <div className=\"todo-list\">\n        {tasks.map((tasks, index) => (\n          <Task \n            key={index}\n            index={index}\n            tasks={tasks}\n            completeTask={completeTask}\n            removeTask={removeTask}\n            count={count}\n            setCount={setCount}\n            />\n        ))}\n        <TaskForm \n          addTask={addTask} \n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}